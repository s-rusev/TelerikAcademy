Ето как аз виждам нещата :)

1. Разделяме се така.

- Събо - 
Генериране на игровото поле.
За тази цел трябва да подготвиш картинки, примерно 50рх х 50рх, хубаво е ако са вектори :) тогава можем лесно да променяме цвета например, а и размера без да разваляме самите картинки. Обекта представляващ играча също може да е в няколко варианта (танк, ATV, нинджа...). Трябва да имаме, поне три вида врагове, които може да се различават дори само по цвят, но трябва да имат разлика, тъй като едните, примерно ще стрелят, другите ще умират от три попадения, а третите ще са съвсем обикновенни (това всичко е примерно, може съвсем други неща да измислите). Ще трябва да имаме, да кажем два бонус обекта, ракети, които в рамките на да кажем 50 цикъла убиват всички с един изтрел, без значение от вида на противника и монети, с които ще си пазаруваме в края на нивото. 

Задачата ти хич не е проста, тъй като на практика ще трябва да напишеш класовете на всички обекти в играта :) Аз със сигурност ще помагам за това.

- Велко -
 Както се рабрахме ти правиш самия GamePlay. Т.е. ще трябва да се погрижиш за Render и Update методите, като ги изпълняваш последователно върху всеки един от обектите в масива от игрови обекти. В Render метода на всеки цикъл изчистваш контейнера и създаваш фрагмент, който закачаш на контейнера, а в Update е най-добре да се викат Update методите на обектите. Освен това ще трябва да направиш и Colision detection. 
 
 Що се касае началото на играта:
 
 Играча трябва да се появява на произволна позиция в лявата част на екрана, а враговете разпръснати в дясната част, като не е задължително да са в рамките на контейнера, т.е. при предвижването си наляво в един момент ще се появят. По този начин ще имаме врагове равномерно разпределени, а не събрани в една линия. Чудих се дали първоначалното задаване на позиции трябва да го прави Събо в конструктурите на обектите или Велко при създаването им, но все пак ми се струва, че второто е по-правилно, тъй като обектите, не трябва да знаят за съществуването на игровото поле (контейнера). Те би трябвало да могат да бъдат създадени навсякъде. Затова мисля, че е по-правилно Велко да задава първоначалните им позиции.

Тук също съм готов да помагам :)

Освен всичко, Велко изяви желание и да се запознае с APIто на FaceBook :), така че за него остава и share. 

- Стамо -
Както говорихме, аз ще се захвана с потребителския интерфейс, но това не значи, че няма да помагам и за другите неща. Моя работа е да подготвя базата данни и няколко PHP скрипта, които да работят с нея. Да направя login и register. Бутончета, визуализация на резултатите, управление на играча от клавиатурата. Не съм много добър дизайнер, така, че тук ще очаквам помощ от вас. Също така ще помисля над купуването на надстройки между нивата.

- Стефка и Златил -
За съжаление с вас не можахме да се видим и съответно не знам с какво бихте се захванали. Със сигурност трябва да се пишат Unit tests и документация, така че ако някой иска да го прави е добре дошъл. Разбира се задачите на Велко и Събо хич не са леки, така че може и на тях да помагате.

2. Технологии

Знам, че аз бях основния застъпник на Knockout, но си признавам, че се отказвам. Нямаме време да го разучаваме, а и не е правен за игри. На практика не виждам къде ще ни помогне. Предлагам да се придържаме към Module Design Pattern и най-простото прототипно наследяване, което още Павката ни показа миналия курс. Неговата функция поне работи и е доста разбираема.

	Function.prototype.inherit = function (parent) {
        this.prototype = new parent();
        this.prototype.constructor = parent;
    }
	
Разбира се нямам нищо против и advanced JS OOP, но ще трябва да пооправим функциите на Жоро (и да решим точно кой вариант ще използваме).

Иначе, аз сега ще подготвя един скелет на проекта с работно заглавие Tank, а вече в последствие ще доуточним всичко :)

Очаквам коментари :)

----- Забравих да напиша ----------

Това, което коментирахме за дивове от други сайтове няма да стане. Вчера все пак написах PHP скрипта, който събира дивовете от произволен сайт, както и AJAX който ги взимаше като JSON обект в JS, но изникна следния проблем: извадени от контекста на HTMLа, тези дивове губят стилизацията си и всъщност не приличат на страницата от която са взети. Ако тръгнем да fetch-ваме и стилове, става прекалено сложно, а и не съм убеден, че ще се получи, затова предлагам да се придържаме към собствени обекти.